// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace WSPlus.DATA.Models
{
    public partial class WSPlusContext : DbContext
    {
        public WSPlusContext()
        {
        }

        public WSPlusContext(DbContextOptions<WSPlusContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Atendente> Atendente { get; set; }
        public virtual DbSet<Cliente> Cliente { get; set; }
        public virtual DbSet<Comanda> Comanda { get; set; }
        public virtual DbSet<Empresa> Empresa { get; set; }
        public virtual DbSet<Estoque> Estoque { get; set; }
        public virtual DbSet<Fornecedor> Fornecedor { get; set; }
        public virtual DbSet<Marca> Marca { get; set; }
        public virtual DbSet<Mesa> Mesa { get; set; }
        public virtual DbSet<Produto> Produto { get; set; }
        public virtual DbSet<Secao> Secao { get; set; }
        public virtual DbSet<SetorDoEstoque> SetorDoEstoque { get; set; }
        public virtual DbSet<Usuario> Usuario { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
                optionsBuilder.UseSqlServer("Data Source=PAT-000160\\SQLEXPRESS;Initial Catalog=WSPlus;Integrated Security=True;TrustServerCertificate=True");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Comanda>(entity =>
            {
                entity.HasOne(d => d.IdMesaNavigation)
                    .WithMany(p => p.Comanda)
                    .HasForeignKey(d => d.IdMesa)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Comanda_Mesa");

                entity.HasOne(d => d.IdProdutoNavigation)
                    .WithMany(p => p.Comanda)
                    .HasForeignKey(d => d.IdProduto)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Comanda_Produto");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.Comanda)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Comanda_Usuario");
            });

            modelBuilder.Entity<Estoque>(entity =>
            {
                entity.HasOne(d => d.IdSetorEstoqueNavigation)
                    .WithMany(p => p.Estoque)
                    .HasForeignKey(d => d.IdSetorEstoque)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Estoque_Setor_do_Estoque");
            });

            modelBuilder.Entity<Produto>(entity =>
            {
                entity.HasOne(d => d.IdEstoqueProdutoNavigation)
                    .WithMany(p => p.Produto)
                    .HasForeignKey(d => d.IdEstoqueProduto)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Produto_Estoque");

                entity.HasOne(d => d.IdFornecedorNavigation)
                    .WithMany(p => p.Produto)
                    .HasForeignKey(d => d.IdFornecedor)
                    .HasConstraintName("FK_Produto_Fornecedor");

                entity.HasOne(d => d.IdMarcaProdutoNavigation)
                    .WithMany(p => p.Produto)
                    .HasForeignKey(d => d.IdMarcaProduto)
                    .HasConstraintName("FK_Produto_Marca");

                entity.HasOne(d => d.IdSecaoProdutoNavigation)
                    .WithMany(p => p.Produto)
                    .HasForeignKey(d => d.IdSecaoProduto)
                    .HasConstraintName("FK_Produto_Secao");
            });

            modelBuilder.Entity<Usuario>(entity =>
            {
                entity.HasOne(d => d.IdAtendenteNavigation)
                    .WithMany(p => p.Usuario)
                    .HasForeignKey(d => d.IdAtendente)
                    .HasConstraintName("FK_Usuario_Atendente");

                entity.HasOne(d => d.IdEmpresaNavigation)
                    .WithMany(p => p.Usuario)
                    .HasForeignKey(d => d.IdEmpresa)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Usuario_Empresa");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}